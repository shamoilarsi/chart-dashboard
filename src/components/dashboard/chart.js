import React, { useEffect, useState } from "react";
import { MdOpenInFull, MdOutlineAddCircleOutline } from "react-icons/md";
import clsx from "clsx";

import styles from "./styles/chart.module.css";
import IconButton from "../shared/IconButton";
import { getCoinChartData } from "../../api/coingecko";
import Graph from "../shared/Graph";

const rawData = [
  [1635076930234, 60265.27366131045],
  [1635080609101, 60452.84276221011],
  [1635084216791, 60531.78422608048],
  [1635087779438, 60171.631919271116],
  [1635091305549, 60243.10740230382],
  [1635094955345, 60320.656314553424],
  [1635098692437, 60246.16996838899],
  [1635102006262, 60182.8088390515],
  [1635105674389, 60560.56493099557],
  [1635109937616, 61315.38278642506],
  [1635112844560, 60921.603746009736],
  [1635116690227, 61201.28453705165],
  [1635120598596, 61119.93510737243],
  [1635124260085, 62286.5615746017],
  [1635128053926, 62087.749288904575],
  [1635131457124, 62310.93042741927],
  [1635134952717, 62282.31420959382],
  [1635138287803, 62114.76416533854],
  [1635141655830, 62160.49901245171],
  [1635145276829, 62470.149147100165],
  [1635149000838, 62990.953666070454],
  [1635152503962, 63029.09032100597],
  [1635156486036, 63062.76159868404],
  [1635159772430, 63080.55062001406],
  [1635163437924, 63070.90071673478],
  [1635167510225, 62864.30845065114],
  [1635170474435, 63400.643465811176],
  [1635174166526, 63683.56563055486],
  [1635178491090, 63893.90672492313],
  [1635181367533, 63917.434158466596],
  [1635185100798, 63431.78509830987],
  [1635188448417, 63355.17536492092],
  [1635192312518, 63038.34165270857],
  [1635195739621, 62891.77565942479],
  [1635199398112, 63113.77784501131],
  [1635202899067, 63333.08327548281],
  [1635206579324, 63228.21382584213],
  [1635210323804, 63267.16370437168],
  [1635214790927, 63052.39945430261],
  [1635217347166, 63033.62005766051],
  [1635221041108, 63152.56975969164],
  [1635224584887, 62732.23369812556],
  [1635228140403, 62699.31867556148],
  [1635232070185, 62674.67408742275],
  [1635236123529, 63030.83380541139],
  [1635239747571, 63027.0201459475],
  [1635242556747, 62930.16716707974],
  [1635246213178, 63238.22586208257],
  [1635249877096, 63021.60661507245],
  [1635253389738, 62866.06686548243],
  [1635256890237, 62550.561980306295],
  [1635260659692, 61972.93260624749],
  [1635264182390, 62880.525104014145],
  [1635267979688, 62191.38059707892],
  [1635271319600, 62706.64285111365],
  [1635274825816, 62534.56619343088],
  [1635278547030, 62281.46780826973],
  [1635282095435, 62336.14630806755],
  [1635285684254, 60776.030045155225],
  [1635289257930, 60290.49436384323],
  [1635293380742, 60666.839508071585],
  [1635296945721, 61017.66606543638],
  [1635300452057, 60804.771789269034],
  [1635303927766, 60727.77296756266],
  [1635307446745, 60926.049901897146],
  [1635311095748, 61525.05714700251],
  [1635314714630, 61096.36563216311],
  [1635318473122, 61000.1921737987],
  [1635322044448, 59941.19284055895],
  [1635325620154, 59221.777193648886],
  [1635328999610, 58879.42933842954],
  [1635332950865, 59123.006078102626],
  [1635336296267, 58708.95309797362],
  [1635339851005, 59176.82340659799],
  [1635343462975, 59106.127841946254],
  [1635346890230, 59526.70674306741],
  [1635350590834, 58829.429403520255],
  [1635354902124, 59154.157054497686],
  [1635358160759, 59007.361148138334],
  [1635361483938, 58786.0222610868],
  [1635364822513, 59089.301304105145],
  [1635368448124, 58995.43511912651],
  [1635372198551, 59021.0853985233],
  [1635375604289, 58657.64028423439],
  [1635379346396, 58641.00147419492],
  [1635382950349, 58501.39149206386],
  [1635387217731, 58856.41501866843],
  [1635390075423, 58910.353742529725],
  [1635393748830, 58878.7456597282],
  [1635397730399, 58801.310899837415],
  [1635400992081, 59370.262880831906],
  [1635404465558, 59461.227809246564],
  [1635408199669, 59454.87220665735],
  [1635411897121, 60917.48808272384],
  [1635415484010, 61303.51208149314],
  [1635419095263, 61101.63133333157],
  [1635422433985, 61145.48042737277],
  [1635426893483, 61285.0526914568],
  [1635429660822, 61769.69553776697],
  [1635433223623, 61803.521502544674],
  [1635436833833, 61383.577330352135],
  [1635440609187, 61513.407077203636],
  [1635444018767, 61389.622277206596],
  [1635447823403, 60261.57674627253],
  [1635451392960, 61386.51611571548],
  [1635455377210, 61605.24550242295],
  [1635459227589, 61076.70075066628],
  [1635462082816, 60698.16617918995],
  [1635465831213, 60767.55585206728],
  [1635470010602, 61572.5392898068],
  [1635472873286, 61682.15126535318],
  [1635476527804, 61767.87818052345],
  [1635480117549, 61837.071590770734],
  [1635483649178, 61710.80514766727],
  [1635487635621, 60970.92834238669],
  [1635491524659, 61337.47561251887],
  [1635495674644, 61087.68477834882],
  [1635498086772, 61010.8049835607],
  [1635501622178, 60995.91421236785],
  [1635505509585, 61042.9997232607],
  [1635508893756, 61047.96940151449],
  [1635512566317, 61150.95440631952],
  [1635516521323, 61403.55563729435],
  [1635519672522, 61406.31390283553],
  [1635524243797, 62912.08525722488],
  [1635526835686, 62713.5078448225],
  [1635530406265, 62395.53477030997],
  [1635534274308, 62144.07772359226],
  [1635537706106, 62575.69253363675],
  [1635541451591, 62463.09270895821],
  [1635545122399, 62518.60800745937],
  [1635548447952, 62484.40759395796],
  [1635552847273, 62321.03125008484],
  [1635555756008, 62016.174384007405],
  [1635559421772, 62230.81388121616],
  [1635563275883, 62049.30050033646],
  [1635566472968, 61845.07115655369],
  [1635570448277, 61582.24721313951],
  [1635573795235, 61708.881066784765],
  [1635577365296, 61805.26967007037],
  [1635580812121, 61784.531662677706],
  [1635585243481, 61451.67103559246],
  [1635588027185, 61602.19397892834],
  [1635592217974, 62018.17840663905],
  [1635595300529, 61733.04247034514],
  [1635598831906, 61814.686430349204],
  [1635602657175, 61690.01977069904],
  [1635606102574, 61508.31489297199],
  [1635609859229, 61505.440650065764],
  [1635614043931, 61331.28731343258],
  [1635617011840, 61537.061268817735],
  [1635620488640, 61660.029738048725],
  [1635624036024, 61837.18122671783],
  [1635627693736, 61888.96840216213],
  [1635631767689, 61687.02152210307],
  [1635634849630, 61700.494998800474],
  [1635638560314, 61837.257002978935],
  [1635642062607, 62349.61165957307],
  [1635645662372, 62225.442872734166],
  [1635649313955, 61855.42561004313],
  [1635652960220, 61730.73546260896],
  [1635656549384, 61573.0298743449],
  [1635660991310, 61378.09161739385],
  [1635663709078, 61408.37271523324],
  [1635667685627, 61485.85438779039],
  [1635671016091, 60956.501492476076],
  [1635674485570, 60745.85769139992],
  [1635678057079, 61032.75977087859],
  [1635680292000, 60719.19840403496],
];

const useChartRanges = () => {
  return [
    { label: "1d", days: "1" },
    { label: "3d", days: "3" },
    { label: "1w", days: "7" },
    { label: "1m", days: "30" },
    { label: "6m", days: "180" },
    { label: "1y", days: "365" },
    { label: "max", days: "max" },
  ];
};

const RangeItem = ({ label, active, onClick }) => {
  return (
    <span
      onClick={onClick}
      className={clsx({ [styles.range]: true, [styles.rangeActive]: active })}
    >
      {label}
    </span>
  );
};

function Chart() {
  const WIDTH = 1000;

  const chartRanges = useChartRanges();
  const [activeDays, setActiveDays] = useState(chartRanges[0].days);
  const [data, setData] = useState([]);

  useEffect(() => {
    (async () => {
      try {
        // const data = (await getCoinChartData("bitcoin", activeDays)).prices;
        setData(rawData.map((i) => ({ time: i[0], price: i[1] })));
      } catch (e) {
        console.error(e);
      }
    })();
  }, [activeDays]);

  return (
    <>
      <div className={styles.chartContainer} style={{ width: WIDTH }}>
        <div className={styles.chartOptions}>
          <IconButton Icon={MdOpenInFull} label="Fullscreen" />
          <div className="horizontal-spacer" />
          <IconButton Icon={MdOutlineAddCircleOutline} label="Compare" />
        </div>

        <div>
          {chartRanges.map((range) => {
            const { days, label } = range;
            return (
              <RangeItem
                key={days}
                label={label}
                onClick={() => setActiveDays(days)}
                active={activeDays === days}
              />
            );
          })}
        </div>
      </div>
      <Graph data={data} days={activeDays} width={WIDTH} />
    </>
  );
}

export default Chart;
